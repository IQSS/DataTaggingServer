# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET     /                                        controllers.Application.index
GET     /models/                                 controllers.Application.publicModelCatalog
GET     /models/tagDownload                      controllers.InterviewCtrl.downloadTags
GET     /models/:modelId                         controllers.Application.showModel(modelId)
GET     /models/:modelName/latest                controllers.ModelCtrl.showLatestVersion(modelName)
GET     /models/:modelId/latest/start            controllers.ModelCtrl.startLatestVersion(modelId, localizationName:Option[String]?=None)
GET     /models/:modelId/:versionNum/            controllers.InterviewCtrl.interviewIntroDirect(modelId, versionNum:Int)
GET     /models/:modelId/:versionNum/intro       controllers.InterviewCtrl.interviewIntro(modelId, versionNum:Int)
GET     /models/:modelId/:versionNum/start       controllers.InterviewCtrl.startInterview(modelId, versionNum:Int, localizationName:Option[String]?=None)
GET     /models/:modelId/:versionNum/postReadme  controllers.InterviewCtrl.startInterviewPostReadme(modelId, versionNum:Int)
GET     /models/:modelId/:versionNum/q/:nodeId   controllers.InterviewCtrl.askNode(modelId, versionNum:Int, nodeId)
POST    /models/:modelId/:versionNum/q/:nodeId   controllers.InterviewCtrl.answer(modelId, versionNum:Int, nodeId)
GET     /models/:modelId/:versionNum/accept      controllers.InterviewCtrl.accept(modelId, versionNum:Int)
GET     /models/:modelId/:versionNum/transcript  controllers.InterviewCtrl.transcript(modelId, versionNum:Int, format:Option[String])
GET     /models/:modelId/:versionNum/reject      controllers.InterviewCtrl.reject(modelId, versionNum:Int)
POST    /models/:modelId/:versionNum/revisit     controllers.InterviewCtrl.revisit(modelId, versionNum:Int)
GET     /models/:modelId/:versionNum/allQuestions controllers.InterviewCtrl.viewAllQuestions(modelId, versionNum:Int, localizationName:Option[String]?=None)
GET     /models/:modelId/:versionNum/visualizations/:fileType/:format controllers.ModelCtrl.visualizationFile(modelId:String, versionNum:Int, format:String, fileType:String)

# Link to access a model with no login
GET  /access/models/:accessLink                  controllers.InterviewCtrl.accessByLink(accessLink)

# Requested Interviews
POST	/api/1/interviewRequest/:modelId/:versionNum  controllers.RequestedInterviewCtrl.apiRequestInterview(modelId, versionNum:Int)
GET		/requestedInterview/:uniqueLinkId             controllers.RequestedInterviewCtrl.start(uniqueLinkId: String)
POST	/postBackTo/:uniqueLinkId				            controllers.RequestedInterviewCtrl.postBackTo(uniqueLinkId: String)
POST 	/unacceptableDataset/:uniqueLinkId/:reason	controllers.RequestedInterviewCtrl.unacceptableDataset(uniqueLinkId: String, reason: String)
POST 	/tempTestServer							                controllers.TestCtrl.tempTestServer

# Back-office
GET     /admin/models/new     controllers.ModelCtrl.showNewModelPage
POST    /admin/models/        controllers.ModelCtrl.doSaveNewModel
GET     /admin/models/:id/edit controllers.ModelCtrl.showEditModelPage(id)
POST    /admin/models/:id     controllers.ModelCtrl.doSaveModel(id)
DELETE  /admin/models/:id     controllers.ModelCtrl.apiDoDeleteModel(id)
GET     /admin/models/          controllers.ModelCtrl.showModelsList
GET     /admin/models/:id       controllers.ModelCtrl.showModelPage(id)
GET     /api/customization    controllers.BackendCtrl.apiGetCustomizations
POST    /api/customization    controllers.BackendCtrl.apiSetCustomizations

POST    /admin/models/:modelId/versions/           controllers.ModelCtrl.uploadNewVersion(modelId)
GET     /admin/models/:modelId/versions/new/edit   controllers.ModelCtrl.showNewVersionPage(modelId)
GET     /admin/models/:modelId/versions/:vNum      controllers.ModelCtrl.showVersionPage(modelId, vNum:Int)
GET     /admin/models/:modelId/versions/:vNum/edit controllers.ModelCtrl.showEditVersionPage(modelId, vNum:Int)
POST    /admin/models/:modelId/versions/:vNum      controllers.ModelCtrl.saveVersion(modelId, vNum:Int)
DELETE  /admin/models/:modelId/versions/:vNum/delete  controllers.ModelCtrl.deleteVersion(modelId, vNum:Int)
GET     /admin/comments/:id   controllers.CommentsCtrl.showComment(id:Long)

# Users
GET     /admin/                      controllers.BackendCtrl.index
GET     /admin/customization         controllers.BackendCtrl.showCustomization
GET     /admin/login                 controllers.UsersCtrl.showLogin
POST    /admin/login                 controllers.UsersCtrl.doLogin
POST    /admin/logout                controllers.UsersCtrl.doLogout
GET     /admin/users/                controllers.UsersCtrl.showUserList
GET     /admin/users/new             controllers.UsersCtrl.showNewUserPage
POST    /admin/users/                controllers.UsersCtrl.doSaveNewUser
GET     /admin/users/:id/edit        controllers.UsersCtrl.showEditUserPage(id)
POST    /admin/users/:id/edit        controllers.UsersCtrl.doSaveUser(id)
POST    /admin/api/users/            controllers.UsersCtrl.apiAddUser
GET     /admin/forgotPassword        controllers.UsersCtrl.showForgotPassword
POST    /admin/forgotPassword        controllers.UsersCtrl.doForgotPassword
GET     /admin/resetPassword/:id     controllers.UsersCtrl.showResetPassword(id)
POST    /admin/resetPassword/        controllers.UsersCtrl.doResetPassword
GET     /admin/inviteUser/           controllers.UsersCtrl.showInviteUser
POST    /admin/inviteUser/           controllers.UsersCtrl.doInviteUser
GET     /admin/newUserInvitation/:id controllers.UsersCtrl.showNewUserInvitation(id)
POST    /admin/newUserInvitation/    controllers.UsersCtrl.doNewUserInvitation
POST    /admin/changePassword        controllers.UsersCtrl.doChangePassword

# Comments
POST    /admin/api/comments/             controllers.CommentsCtrl.apiAddComment
PUT     /admin/api/comments/:id/status   controllers.CommentsCtrl.apiSetCommentStatus(id:Long)
DELETE  /admin/api/comments/:id/delete   controllers.CommentsCtrl.deleteComment(id:Long)

GET    /admin/localApi/visualizations/recreate   controllers.ModelCtrl.recreateViz
GET    /admin/localApi/refactor                  controllers.ModelCtrl.refactorApi


# Map static resources from the /public folder to the /assets URL path
# GET  /assets/*file           controllers.Assets.at(path="/public", file)
GET  /assets/*file        controllers.Assets.at(file)
GET  /assets/*file        controllers.Assets.versioned(path="/public", file: Asset)
GET  /javascriptRoutes    controllers.Application.javascriptRoutes

# Game and funs
GET	    /test/tagsDisplay/:modelId/:versionNum  controllers.TestCtrl.showTagTree(modelId, versionNum:Int, loc:Option[String]?=None)

PUT     /test/models/:name  controllers.TestCtrl.addVersionedModel(name)
GET     /test/models/       controllers.TestCtrl.listVersionedModels
GET     /test/models/:name  controllers.TestCtrl.showModel(name)
GET     /test/xml/:count    controllers.TestCtrl.getXmlText(count:Int)

