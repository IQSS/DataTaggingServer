# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET     /                                        controllers.Application.index
GET     /models/                                 controllers.Application.publicModelCatalog
GET     /models/tagDownload                      controllers.InterviewCtrl.downloadTags
GET     /models/:modelId                         controllers.Application.showVersionedPolicyModel(modelId)
GET     /models/:modelId/:versionNum/intro       controllers.InterviewCtrl.interviewIntro(modelId, versionNum:Int)
GET     /models/:modelId/:versionNum/start       controllers.InterviewCtrl.startInterview(modelId, versionNum:Int, localizationName:Option[String]?=None)
GET     /models/:modelId/:versionNum/postReadme  controllers.InterviewCtrl.startInterviewPostReadme(modelId, versionNum:Int)
GET     /models/:modelId/:versionNum/q/:nodeId   controllers.InterviewCtrl.askNode(modelId, versionNum:Int, nodeId)
POST    /models/:modelId/:versionNum/q/:nodeId   controllers.InterviewCtrl.answer(modelId, versionNum:Int, nodeId)
GET     /models/:modelId/:versionNum/accept      controllers.InterviewCtrl.accept(modelId, versionNum:Int)
GET     /models/:modelId/:versionNum/reject      controllers.InterviewCtrl.reject(modelId, versionNum:Int)
POST    /models/:modelId/:versionNum/revisit/    controllers.InterviewCtrl.revisit(modelId, versionNum:Int)

GET  /visualizations/*path   controllers.Application.visualizationFile(path)

# Link to access a model with no login
GET  /access/models/:accessLink                  controllers.InterviewCtrl.accessByLink(accessLink)

# Requested Interviews
POST	/api/1/interviewRequest/:modelId/:versionNum  controllers.API.requestInterview(modelId, versionNum:Int)
GET		/requestedInterview/:uniqueLinkId             controllers.RequestedInterview.start(uniqueLinkId: String)

POST	/postBackTo/:uniqueLinkId				            controllers.RequestedInterview.postBackTo(uniqueLinkId: String)
POST 	/unacceptableDataset/:uniqueLinkId/:reason	controllers.RequestedInterview.unacceptableDataset(uniqueLinkId: String, reason: String)
POST 	/tempTestServer							                controllers.Test.tempTestServer

# Back-office
GET     /admin/vpms-m/new     controllers.PolicyKitManagementCtrl.showNewVpmPage
POST    /admin/vpms-m/        controllers.PolicyKitManagementCtrl.doSaveNewVpm
GET     /admin/vpms-m/:id     controllers.PolicyKitManagementCtrl.showEditVpmPage(id)
POST    /admin/vpms-m/:id     controllers.PolicyKitManagementCtrl.doSaveVpm(id)
DELETE  /admin/vpms-m/:id     controllers.PolicyKitManagementCtrl.apiDoDeleteVpm(id)
GET     /api/customization    controllers.BackendCtrl.apiGetCustomizations
POST    /api/customization    controllers.BackendCtrl.apiSetCustomizations

POST    /admin/vpms/:modelId/versions/           controllers.PolicyKitManagementCtrl.doSaveNewVersion(modelId)
GET     /admin/vpms/:modelId/versions/new/edit   controllers.PolicyKitManagementCtrl.showNewVersionPage(modelId)
GET     /admin/vpms/:modelId/versions/:vNum      controllers.PolicyKitManagementCtrl.showVersionPage(modelId, vNum:Int)
GET     /admin/vpms/:modelId/versions/:vNum/edit controllers.PolicyKitManagementCtrl.showEditVersionPage(modelId, vNum:Int)
POST    /admin/vpms/:modelId/versions/:vNum      controllers.PolicyKitManagementCtrl.doSaveVersion(modelId, vNum:Int)
GET     /admin/vpms/          controllers.PolicyKitManagementCtrl.showVpmList
GET     /admin/vpms/:id       controllers.PolicyKitManagementCtrl.showVpmPage(id)

GET     /admin/comments/:id   controllers.CommentsCtrl.showComment(id:Long)

# Users
GET     /admin/                  controllers.BackendCtrl.index
GET     /admin/customization     controllers.BackendCtrl.showCustomization
GET     /admin/login             controllers.UsersCtrl.showLogin
POST    /admin/login             controllers.UsersCtrl.doLogin
POST    /admin/logout            controllers.UsersCtrl.doLogout
GET     /admin/users/            controllers.UsersCtrl.showUserList
GET     /admin/users/new         controllers.UsersCtrl.showNewUserPage
POST    /admin/users/            controllers.UsersCtrl.doSaveNewUser
GET     /admin/users/:id/edit    controllers.UsersCtrl.showEditUserPage(id)
POST    /admin/users/:id/edit    controllers.UsersCtrl.doSaveUser(id)
POST    /admin/api/users/        controllers.UsersCtrl.apiAddUser

# Comments
POST    /admin/api/comments/             controllers.CommentsCtrl.apiAddComment
PUT     /admin/api/comments/:id/status   controllers.CommentsCtrl.apiSetCommentStatus(id:Long)

# Map static resources from the /public folder to the /assets URL path
# GET  /assets/*file           controllers.Assets.at(path="/public", file)
GET  /assets/*file        controllers.Assets.at(file)
GET  /javascriptRoutes    controllers.Application.javascriptRoutes

# Game and funs
GET	    /test/tagsDisplay/:modelId/:versionNum  controllers.Test.showTagTree(modelId, versionNum:Int, loc:Option[String]?=None)

PUT     /test/models/:name  controllers.Test.addVersionedModel(name)
GET     /test/models/       controllers.Test.listVersionedModels
GET     /test/models/:name  controllers.Test.showModel(name)