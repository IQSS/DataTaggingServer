# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Backwards compatibility for KLO cards.
GET  /models/:modelId/latest/start            controllers.InterviewCtrl.doStartInterviewLatest(modelId)

# Home page
GET  /                                        controllers.Application.index
GET  /about/                                  controllers.Application.aboutServer
GET  /models/                                 controllers.Application.publicModelCatalog
GET  /models/tagDownload                      controllers.InterviewCtrl.downloadTags
GET  /models/:modelId/                        controllers.InterviewCtrl.initiateInterviewRedirect(modelId)
GET  /models/:modelId/start                   controllers.InterviewCtrl.initiateInterview(modelId)
GET  /models/:modelId/:versionNum/            controllers.InterviewCtrl.showStartInterview(modelId, versionNum:Int, localizationName:Option[String]?=None, sid:Option[String]?=None)
GET  /models/:modelId/:versionNum/start       controllers.InterviewCtrl.doStartInterview(modelId, versionNum:Int)
GET  /models/:modelId/:versionNum/q/:nodeId   controllers.InterviewCtrl.askNode(modelId, versionNum:Int, nodeId, loc:String)
POST /models/:modelId/:versionNum/q/:nodeId   controllers.InterviewCtrl.answer(modelId, versionNum:Int, nodeId)
GET  /models/:modelId/:versionNum/accept      controllers.InterviewCtrl.accept(modelId, versionNum:Int, loc:String)
GET  /models/:modelId/:versionNum/affirm      controllers.InterviewCtrl.showAffirm(modelId, versionNum:Int, loc:Option[String])
POST /models/:modelId/:versionNum/affirm      controllers.InterviewCtrl.doAffirm(modelId, versionNum:Int)
GET  /models/:modelId/:versionNum/transcript  controllers.InterviewCtrl.transcript(modelId, versionNum:Int, format:Option[String], localizationName:Option[String])
GET  /models/:modelId/:versionNum/reject      controllers.InterviewCtrl.reject(modelId, versionNum:Int, loc:String)
POST /models/:modelId/:versionNum/revisit     controllers.InterviewCtrl.revisit(modelId, versionNum:Int)
GET  /models/:modelId/:versionNum/allQuestions controllers.InterviewCtrl.viewAllQuestions(modelId, versionNum:Int, localizationName:Option[String]?=None)
GET  /models/:modelId/:versionNum/codebook     controllers.InterviewCtrl.viewQuestionCodebook(modelId, versionNum:Int, localizationName:Option[String]?=None)
GET  /models/:modelId/:versionNum/visualizations/:fileType/:format controllers.ModelCtrl.visualizationFile(modelId:String, versionNum:Int, format:String, fileType:String)

GET  /branding/logo  controllers.CustomizationCtrl.getServerLogo

# Link to access a model with no login
GET  /access/models/:accessLink                  controllers.InterviewCtrl.accessByLink(accessLink)

# API
GET  /api/1/models/                        controllers.ModelCtrl.apiListModels
GET  /api/1/models/:modelId/               controllers.ModelCtrl.apiListVersions(modelId)
GET  /api/1/models/:modelId/:ver           controllers.ModelCtrl.apiShowVersion(modelId,ver:Int)
POST /api/1/models/:modelId/requests       controllers.RequestedInterviewCtrl.apiRequestInterviewLatest(modelId)
POST /api/1/models/:modelId/:ver/requests  controllers.RequestedInterviewCtrl.apiRequestInterview(modelId, ver:Int)

# requested interviews
GET  /requestedInterviews/:uuid/start controllers.RequestedInterviewCtrl.start(uuid: String)
POST /requestedInterviews/finish      controllers.RequestedInterviewCtrl.reportInterviewResults

# Back-office
GET     /admin/models/new      controllers.ModelCtrl.showNewModelPage
POST    /admin/models/         controllers.ModelCtrl.doSaveNewModel
GET     /admin/models/:id/edit controllers.ModelCtrl.showEditModelPage(id)
POST    /admin/models/:id      controllers.ModelCtrl.doSaveModel(id)
DELETE  /admin/models/:id      controllers.ModelCtrl.apiDoDeleteModel(id)
GET     /admin/models/         controllers.ModelCtrl.showModelsList
GET     /admin/models/:id      controllers.ModelCtrl.showModelPage(id)

GET     /admin/        controllers.CustomizationCtrl.index
GET     /admin/login   controllers.UsersCtrl.showLogin
POST    /admin/login   controllers.UsersCtrl.doLogin
POST    /admin/logout  controllers.UsersCtrl.doLogout

POST    /admin/models/:modelId/versions/           controllers.ModelCtrl.uploadNewVersion(modelId)
GET     /admin/models/:modelId/versions/new/edit   controllers.ModelCtrl.showNewVersionPage(modelId)
GET     /admin/models/:modelId/versions/:vNum      controllers.ModelCtrl.showVersionPage(modelId, vNum:Int)
GET     /admin/models/:modelId/versions/:vNum/edit controllers.ModelCtrl.showEditVersionPage(modelId, vNum:Int)
POST    /admin/models/:modelId/versions/:vNum      controllers.ModelCtrl.saveVersion(modelId, vNum:Int)
DELETE  /admin/models/:modelId/versions/:vNum/delete  controllers.ModelCtrl.deleteVersion(modelId, vNum:Int)
GET     /admin/comments/:id   controllers.CommentsCtrl.showComment(id:Long)

GET     /admin/customization/pages     controllers.CustomizationCtrl.showPagesCustomization
GET     /admin/customization/texts     controllers.CustomizationCtrl.showTextsCustomization
GET     /admin/customization/styling   controllers.CustomizationCtrl.showStylingCustomization
GET     /admin/customization/analytics controllers.CustomizationCtrl.showAnalyticsCustomization

GET     /admin/api/customization/pages controllers.CustomizationCtrl.apiGetPageCustomizations
POST    /admin/api/customization/logo  controllers.CustomizationCtrl.apiSetLogo
DELETE  /admin/api/customization/logo  controllers.CustomizationCtrl.apiDeleteLogo
PATCH   /admin/api/customization/      controllers.CustomizationCtrl.apiSetCustomizations
PUT     /admin/api/customization/:key  controllers.CustomizationCtrl.apiSetCustomization(key)

GET     /admin/users/                controllers.UsersCtrl.showUserList
GET     /admin/users/new             controllers.UsersCtrl.showNewUserPage
POST    /admin/users/                controllers.UsersCtrl.doSaveNewUser
GET     /admin/users/:id/edit        controllers.UsersCtrl.showEditUserPage(id)
POST    /admin/users/:id/edit        controllers.UsersCtrl.doSaveUser(id)
POST    /admin/api/users/            controllers.UsersCtrl.apiAddUser

GET     /admin/forgotPassword        controllers.UsersCtrl.showForgotPassword
POST    /admin/forgotPassword        controllers.UsersCtrl.doForgotPassword
POST    /admin/changePassword        controllers.UsersCtrl.doChangePassword
GET     /admin/resetPassword/:id     controllers.UsersCtrl.showResetPassword(id)
POST    /admin/resetPassword/        controllers.UsersCtrl.doResetPassword
GET     /admin/inviteUser/           controllers.UsersCtrl.showInviteUser
POST    /admin/inviteUser/           controllers.UsersCtrl.doInviteUser
GET     /admin/newUserInvitation/:id controllers.UsersCtrl.showNewUserInvitation(id)
POST    /admin/newUserInvitation/    controllers.UsersCtrl.doNewUserInvitation

# Comments
POST    /admin/api/comments/             controllers.CommentsCtrl.apiAddComment
PUT     /admin/api/comments/:id/status   controllers.CommentsCtrl.apiSetCommentStatus(id:Long)
DELETE  /admin/api/comments/:id/delete   controllers.CommentsCtrl.deleteComment(id:Long)

# Local admin API
POST   /admin/localApi/visualizations/recreate   controllers.ModelCtrl.recreateViz
POST   /admin/localApi/refactor                  controllers.ModelCtrl.refactorApi
POST   /admin/localApi/models/:model/:version/unload controllers.ModelCtrl.unloadModelVersion(model, version:Int)

# Map static resources from the /public folder to the /assets URL path
# GET  /assets/*file           controllers.Assets.at(path="/public", file)
GET  /assets/*file        controllers.Assets.versioned(path="/public", file: Asset)
GET  /favicon.ico         controllers.Assets.at(path="/public", file="favicon.ico")
GET  /javascriptRoutes    controllers.Application.javascriptRoutes

# Game and funs
GET	    /test/tagsDisplay/:modelId/:versionNum  controllers.TestCtrl.showTagTree(modelId, versionNum:Int, loc:Option[String]?=None)

PUT     /test/models/:name  controllers.TestCtrl.addVersionedModel(name)
GET     /test/models/       controllers.TestCtrl.listVersionedModels
GET     /test/models/:name  controllers.TestCtrl.showModel(name)
POST    /test/postBack      controllers.TestCtrl.testPostBack
GET     /test/xml/:count    controllers.TestCtrl.getXmlText(count:Int)


GET  /apiInterviewCtrl/models/                                                               controllers.APIInterviewCtrl.apiListModels
GET  /apiInterviewCtrl/getModelsNames/                                                       controllers.APIInterviewCtrl.apiListModelsNames()
GET  /apiInterviewCtrl/:modelId/start/                                                       controllers.APIInterviewCtrl.initiateInterview(modelId)
GET  /apiInterviewCtrl/:modelId/:versionNum/:localizationName/start/                         controllers.APIInterviewCtrl.startInterview(modelId, versionNum:Int,localizationName,sid:Option[String]?=None)
GET  /apiInterviewCtrl/answer/:uuid/:modelId/:versionId/:languageId/:reqNodeId/:answer/      controllers.APIInterviewCtrl.answer(uuid,modelId,versionId,languageId,reqNodeId,answer)
POST /apiInterviewCtrl/answerPost/                                                           controllers.APIInterviewCtrl.answerPost()
GET  /apiInterviewCtrl/feedback/:uuid/:modelId/:versionId/:languageId/:reqNodeId/:writer/:comment/     controllers.APIInterviewCtrl.AddQuestionComment(uuid:String,modelId:String,versionId:String,languageId:String,reqNodeId:String,writer:String,comment:String)
GET  /apiInterviewCtrl/askHistory/:uuid/:modelId/:versionId/:languageId/:nodeId/             controllers.APIInterviewCtrl.askHistory(uuid,modelId,versionId,languageId,nodeId)
GET  /apiInterviewCtrl/getTags/:uuid/:modelId/:versionId/:languageId/                        controllers.APIInterviewCtrl.getTags(uuid,modelId,versionId,languageId)